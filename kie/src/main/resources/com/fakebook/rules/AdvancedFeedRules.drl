package com.fakebook.rules

import com.fakebook.model.Similarity
import com.fakebook.model.User
import com.fakebook.model.Post
import com.fakebook.model.Like
import com.fakebook.model.Block
import com.fakebook.model.Hashtag
import java.time.LocalDateTime
import java.util.List
import java.util.Collections
import java.util.Comparator

global List allPosts;
global List allLikes;
global User currentUser;
global List feedPosts;

rule "Reset Score For Advanced Feed"
	agenda-group "advanced-feed"
	salience 200
when
	$post : Post()
then
  $post.resetScore();
end

rule "Score Post Liked By Similar User"
	agenda-group "advanced-feed"
	salience 100
when
	$otherUser : User(username != currentUser.getUsername())
	eval(Similarity.pearsonCorrelation(currentUser, $otherUser, allPosts, allLikes) >= 0.5)
	$like : Like(username == $otherUser.getUsername())
	$post : Post(id == $like.postId, authorUsername != currentUser.getUsername())
then
	$post.addScore(1);
end

rule "Score Post Similar To Liked Post"
	agenda-group "advanced-feed"
	salience 90
when
	$like : Like(username == currentUser.getUsername())
	$likedPost : Post(id == $like.postId)
	$post : Post(this != $likedPost, authorUsername != currentUser.getUsername())
	eval(Similarity.likerOverlap($likedPost, $post, allLikes) >= 0.7)
then
	$post.addScore(1);
end

rule "Score Post Based on User Hashtag Preferences"
	agenda-group "advanced-feed"
	salience 80
when
	$post : Post(authorUsername != currentUser.getUsername())
	$hashtag : String() from $post.getHashtags()

	Number(intValue >= 3) from accumulate(
		$like : Like(username == currentUser.getUsername(), isNewerThanHours(72)) and
		$likedPost : Post(id == $like.postId, hashtags contains $hashtag),
		count($like)
	)
then
	$post.addScore(1);
end

rule "Add High Scoring Posts to Feed"
	agenda-group "advanced-feed"
	salience 10
when
	$post : Post(getScore() > 0, authorUsername != currentUser.getUsername())
	not Like(username == currentUser.getUsername(), postId == $post.getId())
	not Post(this == $post) from feedPosts
then
	feedPosts.add($post);
end

rule "Filter Out Posts From Blocked Users"
  agenda-group "advanced-feed"
  salience 5
when
  $block : Block(username == currentUser.getUsername() || blockedUsername == currentUser.getUsername())
  $blockedUser : String() from (
    $block.getUsername().equals(currentUser.getUsername()) ?
    $block.getBlockedUsername() :
    $block.getUsername()
  )
  $post : Post(authorUsername == $blockedUser)

  Post(this == $post) from feedPosts
then
  feedPosts.remove($post);
end

rule "Limit Feed to Top 20 Posts"
  agenda-group "advanced-feed"
  salience 1
when
then
  Collections.sort(feedPosts, new Comparator<Post>() {
    public int compare(Post p1, Post p2) {
      int scoreComparison = Integer.compare(p2.getScore(), p1.getScore());
      if (scoreComparison != 0) {
        return scoreComparison;
      }

      return p2.getCreatedAt().compareTo(p1.getCreatedAt());
    }
  });

  while (feedPosts.size() > 20) {
    feedPosts.remove(feedPosts.size() - 1);
  }
end